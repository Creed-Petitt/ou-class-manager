generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Class {
  id            String   @id // class_id from API (e.g., "13384")
  subject       String   // Subject code (e.g., "ECE")
  courseNumber  String   // Course number (e.g., "2214") 
  section       String   // Section (e.g., "010")
  title         String   // Course title
  description   String?  // Course description
  instructor    String?  // Primary instructor name
  allInstructors String? // All instructors (comma-separated)
  type          String?  // "Lecture", "Lab", "Seminar", etc.
  delivery      String?  // "Traditional In-Person", "Online", etc.
  genEd         String?  // Gen Ed requirement
  term          String?  // "Full Term", etc.
  semesterDates String?  // "Aug 25 - Dec 12"
  examInfo      String?  // Final exam information
  repeatability String?  // Repeatability rules
  additionalInfo String? // Max hours, prerequisites, etc.
  
  // Relationships
  meetingTimes  MeetingTime[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("classes")
}

model MeetingTime {
  id          Int     @id @default(autoincrement())
  classId     String  // Foreign key to Class
  days        String? // "MWF", "TR", etc.
  startTime   String? // "10:00 am"
  endTime     String? // "10:50 am" 
  location    String? // "Felgar Hall 300"
  building    String? // "Felgar Hall"
  room        String? // "300"
  
  // Relationship
  class       Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@map("meeting_times")
}

model Department {
  code        String  @id // "ECE", "A HI", etc.
  name        String? // Full department name
  
  @@map("departments")
}

model Professor {
  id                    String   @id // GraphQL ID from RMP
  legacyId              String?  // Legacy ID from RMP
  firstName             String
  lastName              String
  department            String?
  departmentId          String?
  lockStatus            String?
  isSaved               Boolean  @default(false)
  isProfCurrentUser     Boolean  @default(false)
  
  // School info
  schoolName            String?
  schoolCity            String?
  schoolState           String?
  schoolCountry         String?
  
  // Rating info
  avgRating             Float?
  numRatings            Int      @default(0)
  avgDifficulty         Float?
  wouldTakeAgainPercent Float?
  
  // Rating distribution
  ratingTotal           Int      @default(0)
  ratingR1              Int      @default(0) // 1-star ratings
  ratingR2              Int      @default(0) // 2-star ratings
  ratingR3              Int      @default(0) // 3-star ratings
  ratingR4              Int      @default(0) // 4-star ratings
  ratingR5              Int      @default(0) // 5-star ratings
  
  // Teacher tags (stored as JSON)
  teacherTags           String?  // JSON array of tag objects
  
  // Course codes (stored as JSON)
  courseCodes           String?  // JSON array of course objects
  
  // Related teachers (stored as JSON)
  relatedTeachers       String?  // JSON array of related teacher IDs
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  ratings               Rating[]
  
  @@map("professors")
}

model Rating {
  id                    String   @id // GraphQL ID from RMP
  legacyId              String?  // Legacy ID from RMP
  professorId           String   // Foreign key to Professor
  
  // Rating data
  comment               String?
  date                  DateTime?
  class                 String?  // Class name (e.g., "ECON4353")
  
  // Individual ratings
  difficultyRating      Float?
  clarityRating         Float?
  helpfulRating         Float?
  
  // Course meta
  wouldTakeAgain        Boolean?
  grade                 String?
  attendanceMandatory   Boolean?
  textbookUse           Boolean?
  isForOnlineClass      Boolean?
  isForCredit           Boolean?
  
  // Tags and flags
  ratingTags            String?  // JSON array of tags
  flagStatus            String?
  createdByUser         Boolean?
  
  // Thumbs up/down
  thumbsUpTotal         Int      @default(0)
  thumbsDownTotal       Int      @default(0)
  
  // Professor response
  teacherNote           String?  // Professor's response to rating
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationship
  professor             Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  
  @@map("ratings")
}

// Major Requirements Models
model Major {
  id            String   @id @default(cuid())
  name          String   // "Computer Engineering"
  code          String?  // "CPE"
  college       String   // "Gallogly College of Engineering"
  department    String?  // "Electrical and Computer Engineering"
  totalCredits  Int      @default(120)
  description   String?
  url           String?  // Original CourseLeaf URL
  
  // Relationships
  requirements  Requirement[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("majors")
}

model Requirement {
  id            String   @id @default(cuid())
  majorId       String   // Foreign key to Major
  categoryName  String   // "Major Requirements", "Gen Ed", etc.
  creditsNeeded Int      @default(0)
  description   String?
  
  // Relationships
  major         Major        @relation(fields: [majorId], references: [id], onDelete: Cascade)
  courses       MajorCourse[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("requirements")
}

model MajorCourse {
  id            String   @id @default(cuid())
  requirementId String   // Foreign key to Requirement
  subject       String   // "ECE", "MATH", etc.
  courseNumber  String   // "2214", "2924", etc.
  title         String?  // "Digital Design", etc.
  credits       Int      @default(3)
  
  // Relationships
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("major_courses")
} 